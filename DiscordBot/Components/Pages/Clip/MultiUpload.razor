@page "/Clip/MultiUpload"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms

<h3>Upload Files with Progress</h3>

<InputFile OnChange="HandleSelectedFiles" multiple />
<br />
<br />

<table class="table">
    <thead>
        <tr>
            <th>File</th>
            <th>Progress</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var fileStatus in fileUploadStatuses)
        {
            <tr>
                <td>@fileStatus.File.Name</td>
                <td>
                    <div class="progress" style="height: 20px;">
                        <div class="progress-bar" role="progressbar"
                             style="width: @fileStatus.Progress%" aria-valuenow="@fileStatus.Progress"
                             aria-valuemin="0" aria-valuemax="100">
                            @($"{fileStatus.Progress}%")
                        </div>
                    </div>
                </td>
                <td>@fileStatus.Status</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<FileUploadStatus> fileUploadStatuses = new();

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        Directory.CreateDirectory("wwwroot/uploads");

        var tasks = e
        .GetMultipleFiles()
        .Select(async file =>
        {
            var status = new FileUploadStatus
            {
                File = file,
                Status = "Uploading...",
                Progress = 0
            };
            try
            {
                long totalRead = 0;
                var buffer = new byte[81920]; // 80KB chunks
                var total = file.Size;
                var uploadPath = Path.Combine("wwwroot/uploads", file.Name);

                using var fileStream = File.Create(uploadPath);
                using var stream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024); // 100MB limit

                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
                {
                    await fileStream.WriteAsync(buffer.AsMemory(0, bytesRead));
                    totalRead += bytesRead;
                    status.Progress = (int)((totalRead * 100) / total);
                }

                status.Status = "Uploaded ✅";
            }
            catch (Exception ex)
            {
                status.Status = $"Failed ❌ ({ex.Message})";
            }
            return status;
        })
        .ToList();

        var waiter = Task.WhenAll(tasks);
        while(!waiter.IsCompleted)
        {
            await Task.Delay(100);
            this.StateHasChanged();
        }


        // fileUploadStatuses.Clear();

        // foreach (var file in e.GetMultipleFiles())
        // {
        //     var status = new FileUploadStatus
        //     {
        //         File = file,
        //         Status = "Uploading...",
        //         Progress = 0
        //     };
        //     fileUploadStatuses.Add(status);
        //     StateHasChanged();

        //     try
        //     {
        //         var buffer = new byte[81920]; // 80KB chunks
        //         long totalRead = 0;
        //         var total = file.Size;
        //         var uploadPath = Path.Combine("wwwroot/uploads", file.Name);

        //         Directory.CreateDirectory("wwwroot/uploads");

        //         using var fileStream = File.Create(uploadPath);
        //         using var stream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024); // 100MB limit

        //         int bytesRead;
        //         while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
        //         {
        //             await fileStream.WriteAsync(buffer.AsMemory(0, bytesRead));
        //             totalRead += bytesRead;

        //             status.Progress = (int)((totalRead * 100) / total);
        //             StateHasChanged(); // updates the progress bar
        //         }

        //         status.Status = "Uploaded ✅";
        //     }
        //     catch (Exception ex)
        //     {
        //         status.Status = $"Failed ❌ ({ex.Message})";
        //     }

        //     StateHasChanged();
        // }
    }

    private sealed class FileUploadStatus
    {
        public IBrowserFile File { get; set; }
        public int Progress { get; set; } = 0;
        public string Status { get; set; } = "Waiting...";
    }
}
