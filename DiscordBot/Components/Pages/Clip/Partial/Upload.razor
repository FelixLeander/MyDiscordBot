@page "/Clip/Upload"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IOptions<Configuration> Options
@inject IHttpContextAccessor ContextAccessor
@using DiscordBot.Business.Helpers.Bot
@using DiscordBot.Models.Entities
@using DiscordBot.Models.Internal.Configs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using Serilog

<h3>Upload-Manager</h3>
<label class="btn btn-primary">Upload File(s)
    <InputFile OnChange="HandleSelectedFiles" AdditionalAttributes="InputFileAttribute" />
</label>
<table class="table">
    <thead>
        <tr>
            <th>Nr.</th>
            <th>File</th>
            <th>Progress</th>
            <th>Status</th>
            <th>Edit</th>
        </tr>
    </thead>
    <tbody>
        @for (var index = 0; index < _fileUploadStatuses.Count; index++)
        {
            var fileStatus = _fileUploadStatuses[index];
            <tr>
                <td>@(index + 1)</td>
                <td>@fileStatus.File.Name</td>
                <td>
                    <div class="progress" style="height: 20px;">
                        <div class="progress-bar" role="progressbar"
                             style="width: @(fileStatus.Progress) %" aria-valuenow="@fileStatus.Progress"
                             aria-valuemin="0" aria-valuemax="100">
                            @($"{fileStatus.Progress}%")
                        </div>
                    </div>
                </td>
                <td>@fileStatus.Status</td>
                <td>Edit</td>
            </tr>
        }
    </tbody>
</table>
<p>@Message</p>

@code {
    [Parameter]
    public Action<AudioClip>? AddAudioClip { get; set; }
    private string Message { get; set; } = string.Empty;
    private readonly List<FileUploadStatus> _fileUploadStatuses = [];
    private static IReadOnlyCollection<string> _validExtensions = [".mp3", ".ogg", ".mp4"];
    private static readonly Dictionary<string, object> InputFileAttribute = new()
    {
        { "accept", string.Join(", ", _validExtensions) },
        { "multiple", true },
        { "hidden",  true}
    };

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        var discordId = ContextAccessor.GetUserIdFromHttpContextAccessor();
        Message = "Processing...";
        _fileUploadStatuses.Clear();
        if (discordId == null)
        {
            Message = "Could not validate your credentials, please reload.";
            return;
        }

        var uploadDir = FileHelper.GetFileUploadDirectory();
        if (!Directory.Exists(uploadDir))
            Directory.CreateDirectory(uploadDir);

        foreach (var browserFile in e.GetMultipleFiles(int.MaxValue))
        {
            await SaveFileAddClipAsync(browserFile);
            StateHasChanged();
        }

        Message = "Done";
        return;

        async Task SaveFileAddClipAsync(IBrowserFile browserFile)
        {
            var status = new FileUploadStatus
                {
                    File = browserFile,
                    Status = "Uploading...",
                    Progress = 0
                };

            try
            {
                _fileUploadStatuses.Add(status);
                StateHasChanged();

                var buffer = new byte[81920]; // 80 KB chunks
                long totalRead = 0;
                var total = browserFile.Size;

                var filePath = Path.Combine(uploadDir, browserFile.Name);
                await using var fileStream = File.Create(filePath);
                var fileSize = 1048576L * Options.Value.Blazor.FileSizeLimitMb;
                await using var stream = browserFile.OpenReadStream(maxAllowedSize: fileSize);

                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
                {
                    await fileStream.WriteAsync(buffer.AsMemory(0, bytesRead));
                    totalRead += bytesRead;

                    status.Progress = (int)(totalRead * 100 / total);
                    StateHasChanged(); // updates the progress bar
                }

                var audioClip = new AudioClip
                    {
                        CallCode = Path.GetFileNameWithoutExtension(browserFile.Name),
                        DiscordUserId = discordId.Value,
                        FilePath = Path.GetRelativePath(FileHelper.AppStorage.FullName, filePath)
                    };

                var result = await ClipHelper.AddNewClipAsync(audioClip);
                status.FilePath = filePath;
                status.Status = result ? "Uploaded ✅" : "Failed ❌";

                AddAudioClip?.Invoke(audioClip);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error uploading file.");
                status.Status = $"Error ❌ ({ex.Message})";
            }
        }
    }

    private sealed class FileUploadStatus
    {
        public string FilePath { get; set; } = string.Empty;
        public required IBrowserFile File { get; init; }
        public int Progress { get; set; }
        public string Status { get; set; } = "Waiting...";
    }
}
