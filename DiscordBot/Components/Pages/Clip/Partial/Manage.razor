@page "/Clip/Manage"
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor
@inject DatabaseContext DatabaseContext
@inject LoginService LoginService
@inject DiscordNet DiscordNet
@using Discord.WebSocket
@using DiscordBot.Business.Bots
@using DiscordBot.Business.Helpers.Blazor
@using DiscordBot.Business.Helpers.Bot
@using DiscordBot.Data
@using DiscordBot.Models.Entities
@using Microsoft.EntityFrameworkCore
@using Serilog

<h3>Clip-Manager</h3>
<h5>TimeStamp (refreshes @(RefreshInSeconds)s): @DateTime.Now.Ticks</h5>
<label>
    Disconnect when done
    <InputCheckbox @bind-Value="_disconnectWhenDone" />
</label>
<table class="table" style="width: 100%">
    <thead>
        <tr>
            <th>Id</th>
            <th>CallCode</th>
            <th>FileName</th>
            <th>User</th>
            @if (LoginService.UserIsLoggedIn)
            {
                <th>Play</th>
            }
            else
            {
                <th>Play (<a href=""></a>)</th>
            }
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var audioData in _audioClipData)
        {
            <tr>
                <td>@audioData.AudioClip.Id</td>
                <td>@audioData.AudioClip.CallCode</td>
                <td>@Path.GetFileNameWithoutExtension(audioData.AudioClip.FilePath)</td>
                @if (audioData.AudioClip.DiscordUser == null)
                {
                    <th>-</th>
                }
                else
                {
                    <th>@audioData.AudioClip.DiscordUser.Username (<i>@audioData.AudioClip.DiscordUser.GlobalName</i>)</th>
                }
                <td>
                    @if (LoginService.UserIsLoggedIn)
                    {
                        <button class="btn btn-success" title="Join your VC" @onclick="() => PlayClipAsync(audioData)">Play</button>
                    }
                </td>
                <td>
                    @if (LoginService.UserIsLoggedIn)
                    {
                        <button class="btn btn-danger" title="Deletes the clip" @onclick="() => DeleteClipAsync(audioData)">Play</button>
                    }
                </td>
                <td>@audioData.StatusMessage</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    private const int RefreshInSeconds = 3;

    [Parameter]
    public List<AudioClip> AudioClips { get; set; } = [];

    private bool _disconnectWhenDone;
    private List<AudioClipComponentData> _audioClipData = [];
    protected override async Task OnInitializedAsync()
    {
        var queryResult = await DatabaseContext.AudioClips
            .AsNoTracking()
            .Include(i => i.DiscordUser)
            .ToListAsync();

        var clipData = queryResult
            .Select(s => new AudioClipComponentData { AudioClip = s })
            .ToList();
        _audioClipData = clipData;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(RefreshInSeconds * 1000);
        StateHasChanged();
    }

    private async Task DeleteClipAsync(AudioClipComponentData audioData)
    {
        try
        {
            var user = HttpContextAccessor.GetUserFromHttpContextAccessor();
            if (user == null)
            {
                Log.Warning("Unauthenticated user tried to delete clip '{callCode}'.", audioData.AudioClip.CallCode);
                audioData.StatusMessage = "Authentication error!";
                return;
            }

            audioData.StatusMessage = "Deleting...";
            DatabaseContext.AudioClips.Remove(audioData.AudioClip);
            var changes = await DatabaseContext.SaveChangesAsync();
            if (changes == 0)
            {
                Log.Warning("DiscordId '{discordName}' tried to delete non existent clip with '{callCode}'", user.Value.DiscordId, audioData.AudioClip.CallCode);
                audioData.StatusMessage = "No clip to delete.";
                return;
            }

            Log.Information("DiscordId '{discordName}' deleted clip with CallCode '{callCode}'.", user.Value.DiscordId, audioData.AudioClip.CallCode);
            audioData.StatusMessage = "Deleted.";
        }
        catch (Exception ex)
        {
            Log.Error(ex, "An error occured trying to delete clip '{clipName}'.", audioData.AudioClip.CallCode);
            audioData.StatusMessage = "Error!";
        }
    }

    private async Task PlayClipAsync(AudioClipComponentData audioData)
    {
        try
        {
            audioData.StatusMessage = "Processing...";
            var user = HttpContextAccessor.GetUserFromHttpContextAccessor();
            if (user == null)
            {
                Log.Warning("Invalid sid from httpContext.");
                audioData.StatusMessage = "You need to re-authenticate.";
                return;
            }

            if (await DiscordNet.DiscordSocketClient.GetUserAsync(user.Value.DiscordId) is not SocketUser socketUser)
            {
                Log.Warning("Could not get user from id.");
                audioData.StatusMessage = "You're not connected to a VC on a server.";
                return;
            }

            var socketGuildUser = socketUser.MutualGuilds
                .Select(s => s.GetUser(user.Value.DiscordId))
                .FirstOrDefault(w => w.VoiceChannel != null);
            if (socketGuildUser == null)
            {
                Log.Verbose("User dosen't seem to be in any VC of a guild the bot is also in.");
                audioData.StatusMessage = $"Can't access the VC, on {socketUser}";
                return;
            }

            audioData.StatusMessage = "Playing...";
            var audioClient = await socketGuildUser.VoiceChannel.ConnectAsync();
            using var audioHelper = new DiscordAudioHelper(audioClient);
            await audioHelper.PlayAudioAsync(audioData.AudioClip.FilePath);
            if (_disconnectWhenDone)
                await socketGuildUser.VoiceChannel.DisconnectAsync();

            audioData.StatusMessage = "Ready";
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error playing audioClip initiated by blazor.");
            audioData.StatusMessage = "Error";
        }
    }

    private sealed class AudioClipComponentData
    {
        internal required AudioClip AudioClip { get; init; }
        internal string StatusMessage { get; set; } = "Ready";
    }
}
