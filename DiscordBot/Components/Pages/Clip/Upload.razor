@page "/Clip/Upload"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IOptions<Configuration> Options

@using DiscordBot.Business.Helpers.Bot
@using DiscordBot.Models.Internal.Configs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using Serilog


<InputFile OnChange="HandleSelectedFiles" AdditionalAttributes="InputFileAttribute" />
<table class="table">
    <thead>
        <tr>
            <th>Nr.</th>
            <th>File</th>
            <th>Progress</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @for (var index = 0; index < _fileUploadStatuses.Count; index++)
        {
            var fileStatus = _fileUploadStatuses[index];
            <tr>
                <td>@(index + 1)</td>
                <td>@fileStatus.File.Name</td>
                <td>
                    <div class="progress" style="height: 20px;">
                        <div class="progress-bar" role="progressbar"
                        style="width: @fileStatus.Progress%" aria-valuenow="@fileStatus.Progress"
                        aria-valuemin="0" aria-valuemax="100">
                            @($"{fileStatus.Progress}%")
                        </div>
                    </div>
                </td>
                <td>@fileStatus.Status</td>
            </tr>
        }
    </tbody>
</table>
<p>@Message</p>

@code {
    private string Message { get; set; } = string.Empty;
    private readonly List<FileUploadStatus> _fileUploadStatuses = [];
    private static IReadOnlyCollection<string> _validExtensions = [".mp3", ".ogg", ".mp4"];
    private static readonly Dictionary<string, object> InputFileAttribute = new()
    {
        { "accept", string.Join(", ", _validExtensions) },
        { "multiple", true }
    };

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        Message = "Processing...";

        _fileUploadStatuses.Clear();
        foreach (var file in e.GetMultipleFiles(int.MaxValue))
        {
            var status = new FileUploadStatus
                {
                    File = file,
                    Status = "Uploading...",
                    Progress = 0
                };

            try
            {
                _fileUploadStatuses.Add(status);
                StateHasChanged();

                var buffer = new byte[81920]; // 80KB chunks
                long totalRead = 0;
                var total = file.Size;

                var uploadDirectory = FileManager.GetFileUploadDirectory();
                var uploadPath = Path.Combine(uploadDirectory.FullName, file.Name);

                await using var fileStream = File.Create(uploadPath);
                var fileSize = (long)1024 * 1024 * Options.Value.Blazor.FileSizeLimitMb;
                await using var stream = file.OpenReadStream(maxAllowedSize: fileSize);

                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
                {
                    await fileStream.WriteAsync(buffer.AsMemory(0, bytesRead));
                    totalRead += bytesRead;

                    status.Progress = (int)(totalRead * 100 / total);
                    StateHasChanged(); // updates the progress bar
                }

                status.Status = "Uploaded ✅";
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Failed to upload file.");
                status.Status = $"Failed ❌ ({ex.Message})";
            }

            StateHasChanged();
        }

        Message = "Done";
    }

    internal sealed class FileUploadStatus
    {
        public required IBrowserFile File { get; init; }
        public int Progress { get; set; }
        public string Status { get; set; } = "Waiting...";
    }
}
