@page "/Control/Voice"
@page "/Control/Voice/{GuildId}/{ChannelId}"
@rendermode InteractiveServer
@attribute [Authorize]
@inject DiscordNet DiscordNet
@using Discord.Audio
@using Discord.WebSocket
@using DiscordBot.Business.Bots
@using DiscordBot.Business.Helpers.Blazor
@using Microsoft.AspNetCore.Authorization
@using Serilog

<h3>Select an option</h3>

<h3>Voice</h3>
<div class="row align-items-start">
    <div class="col-2">
        @foreach (var guild in _guilds)
        {
            <div>
                <a href="@($"{RouteHelper.ControlVoice}/{guild.Id}/{ChannelId}")">
                    <img width="100rem" height="100rem" src="@guild.IconUrl" alt="server icon" />
                    @guild.Name
                </a>
            </div>
        }
    </div>

    <div class="col-2">
        @foreach (var channel in _voiceChannels)
        {
            <div>
                <a href="@($"{RouteHelper.ControlVoice}/{GuildId}/{channel.Id}")">@channel.Name</a>
            </div>
        }
    </div>

    <div class="col">
        @if (VoiceChannel != null)
        {
            <h1>Joining "@VoiceChannel.Name"</h1>
        }
    </div>
</div>

<DiscordBot.Components.Pages.Clip.Partial.Manage />

@code {
    [Parameter]
    public string GuildId
    {
        get => _guildId.ToString();
        set => _guildId = ulong.TryParse(value, out var num) ? num : 0;
    }
    private ulong _guildId;

    [Parameter]
    public string ChannelId
    {
        get => _channelId.ToString();
        set => _channelId = ulong.TryParse(value, out var num) ? num : 0;
    }
    private ulong _channelId;

    private SocketVoiceChannel? VoiceChannel { get; set; }
    private IReadOnlyCollection<SocketGuild> _guilds = [];
    private IReadOnlyCollection<SocketVoiceChannel> _voiceChannels = [];

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _guilds = DiscordNet.DiscordSocketClient.Guilds;
            var guild = DiscordNet.DiscordSocketClient.Guilds.FirstOrDefault(f => f.Id == _guildId);
            if (guild == null)
            {
                Log.Verbose("Could not get guild from client.");
                return;
            }

            _voiceChannels = guild.VoiceChannels;
            VoiceChannel = _voiceChannels.FirstOrDefault(f => f.Id == _channelId);
            if (VoiceChannel == null)
            {
                Log.Verbose("Could not get voice channel from guild*.");
                return;
            }

            await VoiceChannel.ConnectAsync();
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error joining voice.");
        }
    }
}
