@page "/Chat"
@* @page "/Chat/{GuildId}/0" *@
@page "/Chat/{GuildId}/{ChannelId}"
@rendermode InteractiveServer
@inject DiscordNet DiscordNet
@using Discord
@using Discord.WebSocket
@using DiscordBot.Business.Bots
@using DiscordBot.Business.Helpers.Blazor

<h3>Select an option</h3>

<h3>Chat</h3>
<div class="row align-items-start">
    <div class="col-2">
        @foreach (var guild in Guilds)
        {
            <div>
                <img width="100rem" height="100rem" src="@guild.IconUrl" alt="server icon" />
                <a href="@($"{RouteHelper.Chat}/{guild.Id}/{ChannelId}")">@guild.Name</a>
            </div>
        }
    </div>

    <div class="col-2">
        @foreach (var channel in TextChannels)
        {
            <div>
                <a href="@($"{RouteHelper.Chat}/{GuildId}/{channel.Id}")">@channel.Name</a>
            </div>
        }
    </div>
    
    <div class="col">
        <InputTextArea @bind-Value="Message"></InputTextArea>
        <button @onclick="SendMessageAsync">Send</button>
    </div>

    <div class="col">
        @foreach (var message in Messages)
        {
            <b>@message.Author.GlobalName</b>
            <p>@message.Content</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public string GuildId
    {
        get => _guildId.ToString();
        set => _guildId = ulong.TryParse(value, out var num) ? num : 0;
    }
    private ulong _guildId;

    [Parameter]
    public string ChannelId
    {
        get => _channelId.ToString();
        set => _channelId = ulong.TryParse(value, out var num) ? num : 0;
    }
    private ulong _channelId;

    public SocketTextChannel? TextChannel { get; set; }
    public IReadOnlyCollection<SocketGuild> Guilds = [];
    public IReadOnlyCollection<SocketTextChannel> TextChannels = [];
    public IReadOnlyCollection<IMessage> Messages = [];
    public string Message = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        Guilds = DiscordNet.DiscordSocketClient.Guilds;
        var guild = DiscordNet.DiscordSocketClient.Guilds.FirstOrDefault(f => f.Id == _guildId);
        if (guild == null)
            return;

        TextChannels = guild.TextChannels;
        TextChannel = guild.TextChannels.FirstOrDefault(f => f.Id == _channelId);
        if (TextChannel == null)
            return;

        var messages = await TextChannel.GetMessagesAsync(4).ToListAsync();
        Messages = messages.SelectMany(s => s).ToList();
    }

    private async Task SendMessageAsync()
    {
        if (TextChannel != null && !string.IsNullOrWhiteSpace(Message))
            await TextChannel.SendMessageAsync(Message);
    }
}
