@page "/User/Login"
@page "/User/oAuth/Discord"
@rendermode InteractiveServer
@inject LoginService LoginService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@using DiscordBot.Business.Helpers.Blazor
@using DiscordBot.Business.Services
@using Serilog

<h1>Login-Page</h1>
<div>
    @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false)
    {
        <p>Welcome, <b>@HttpContextAccessor.HttpContext.User.Identity.Name</b></p>
    }
    else
    {
        <a href="@_authUrl">Login with Discord</a>
    }
</div>

@code
{
    [Parameter]
    public string State { get; set; } = string.Empty;
    private static string? _authUrl;

    protected override Task OnInitializedAsync()
    {
        _authUrl ??= LoginService.GetDiscordAuthUrl();
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(State))
            return;

        if (State.Equals("Login", StringComparison.OrdinalIgnoreCase))
            await LoginService.LoginUserAsync();
        else if (State.Equals("Logout", StringComparison.OrdinalIgnoreCase))
            await LoginService.LogoutUserAsync();

        Log.Warning("Invalid state '{state}'.", State);
        NavigationManager.NavigateTo(RouteHelper.Home);
    }
}
