@page "/User/Login"
@page "/User/oAuth/{provider}"
@inject LoginService LoginService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor Context
@using DiscordBot.Business.Services

<h1>Login-Page</h1>
<div>
    @if (Context.HttpContext?.User.Identity?.IsAuthenticated ?? false)
    {
        <p>Welcome, <b>@Context.HttpContext.User.Identity.Name</b></p>
        <button class="btn btn-primary" @onclick="LoginService.LogoutUserAsync">Logout</button>
    }
    else
    {
        <a href="@_authUrl">Login with Discord</a>
    }
</div>

@code
{
    protected override Task OnInitializedAsync()
    {
        _authUrl ??= LoginService.GetDiscordAuthUrl();
        return Task.CompletedTask;
    }

    private static string? _authUrl;

    [Parameter]
    public string? Provider { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (Provider == null)
            return;

        if (Provider.Equals("Discord", StringComparison.OrdinalIgnoreCase))
        {
            var uriBuilder = new UriBuilder(NavigationManager.Uri);
            var queryParameters = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
            var discordCode = queryParameters["code"];
        }

        await LoginService.LoginUserAsync();
    }
}
